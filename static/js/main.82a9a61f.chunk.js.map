{"version":3,"sources":["components/Character/Character.js","components/Score/Score.js","components/Container/Container.js","App.js","index.js"],"names":["Character","props","className","onClick","clickCount","id","alt","name","src","image","Score","children","score","topscore","Container","App","state","characters","shuffle","array","i","length","j","Math","floor","random","temp","endGame","setState","console","log","this","forEach","character","click","alert","find","el","map","index","key","Component","ReactDOM","render","document","getElementById"],"mappings":"slEAWeA,G,MARG,SAAAC,GAAK,OACnB,yBAAKC,UAAU,YAAYC,QAAS,kBAAMF,EAAMG,WAAWH,EAAMI,MACjE,6BACE,yBAAKH,UAAU,QAAQI,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,YCM1CC,G,MATD,SAAAT,GAAK,OACf,yBAAKC,UAAU,QACX,yBAAKA,UAAU,SAASD,EAAMU,UAC9B,yBAAKT,UAAU,UAAf,UACYD,EAAMW,MADlB,cACoCX,EAAMY,aCFnCC,G,MAFG,SAAAb,GAAK,OAAI,yBAAKC,UAAU,aAAaD,EAAMU,YC0E9CI,E,2MArEbC,MAAQ,CACNC,aACAL,MAAO,EACPC,SAAU,G,EAKZK,QAAU,SAACC,GAET,IADA,IAAIC,EAAID,EAAME,OAAS,EAChBD,EAAI,EAAGA,IAAK,CACjB,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCM,EAAOP,EAAMC,GACnBD,EAAMC,GAAKD,EAAMG,GACjBH,EAAMG,GAAKI,EAEb,OAAOP,G,EAKTQ,QAAU,WAWR,OAVG,EAAKX,MAAMJ,MAAQ,EAAKI,MAAMH,UAC/B,EAAKe,SAAS,CAACf,SAAU,EAAKG,MAAMJ,QAAQ,WAC1CiB,QAAQC,IAAI,iBAAmBC,KAAKf,MAAMH,aAG9C,EAAKG,MAAMC,WAAWe,SAAQ,SAAAC,GAC5BA,EAAUC,OAAQ,KAEpBC,MAAM,aACN,EAAKP,SAAS,CAAChB,MAAO,KACf,G,EAKTR,WAAa,SAAAC,GACX,IAAM4B,EAAYhB,EAAWmB,MAAK,SAAAC,GAAE,OAAIA,EAAGhC,KAAOA,KAElD,GADAwB,QAAQC,IAAIG,IACY,IAApBA,EAAUC,MAMZ,OALAD,EAAUC,OAAQ,EAClB,EAAKN,SAAS,CAAChB,MAAQ,EAAKI,MAAMJ,MAAQ,IAAI,WAC5CiB,QAAQC,IAAIC,KAAKf,MAAMJ,UAEzB,EAAKM,QAAQD,IACN,GACsB,IAApBgB,EAAUC,OACnB,EAAKP,W,wEAIC,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAOf,MAAOmB,KAAKf,MAAMJ,MAAOC,SAAUkB,KAAKf,MAAMH,UAArD,yBACCkB,KAAKf,MAAMC,WAAWqB,KAAI,SAACL,EAAWM,GAAZ,OACzB,kBAAC,EAAD,CACEnC,WAAY,EAAKA,WACjBC,GAAI4B,EAAU5B,GACdmC,IAAKD,EACL9B,MAAOwB,EAAUxB,gB,GA9DXgC,aCFlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.82a9a61f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Character.css\"\r\n\r\nconst Character = props => (\r\n    <div className=\"character\" onClick={() => props.clickCount(props.id)}>\r\n    <div>\r\n      <img className=\"image\" alt={props.name} src={props.image} />\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport default Character","import React from \"react\";\r\nimport \"./Score.css\"\r\n\r\nconst Score = props => (\r\n    <div className=\"head\">\r\n        <div className=\"title\">{props.children}</div>\r\n        <div className=\"scores\">\r\n            Score: {props.score} Topscore: {props.topscore}\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default Score","import React from \"react\";\r\nimport \"./Container.css\";\r\n\r\nconst Container = props => <div className=\"container\">{props.children}</div>;\r\n\r\nexport default Container;","import React, { Component } from \"react\";\nimport './App.css';\nimport characters from './characters.json'\nimport Character from './components/Character'\nimport Score from './components/Score'\nimport Container from './components/Container/Index'\n\nclass App extends Component {\n  state = {\n    characters, \n    score: 0,\n    topscore: 0\n  };\n\n  //function for shuffling images after clicking\n\n  shuffle = (array) => {\n    let i = array.length - 1;\n    for (; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp; \n    }\n    return array;\n  }\n\n//function to record score and end game \n\n  endGame = () => {\n    if(this.state.score > this.state.topscore) {\n      this.setState({topscore: this.state.score}, function () {\n        console.log(\"New Topscore: \" + this.state.topscore);\n      })\n    }\n    this.state.characters.forEach(character => {\n      character.click = false; \n    })\n    alert(\"Game Over\")\n    this.setState({score: 0});\n    return true;\n  }\n\n  //function to keep track of character clicks \n\n  clickCount = id => {\n    const character = characters.find(el => el.id === id)\n    console.log(character)\n    if (character.click === false) {\n      character.click = true;\n      this.setState({score : this.state.score + 1}, function () {\n        console.log(this.state.score);\n      });\n      this.shuffle(characters);\n      return true;\n    } else if (character.click === true) {\n      this.endGame();\n    }\n  }\n\n  render() {\n    return (\n      <Container>\n        <Score score={this.state.score} topscore={this.state.topscore}>South Park Click Game</Score>\n        {this.state.characters.map((character, index) => (\n          <Character\n            clickCount={this.clickCount}\n            id={character.id}\n            key={index}\n            image={character.image}\n            />\n        ))}\n      </Container>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}